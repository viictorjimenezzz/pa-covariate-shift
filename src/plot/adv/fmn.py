from collections import defaultdict
import os
import os.path as osp
from tqdm import tqdm
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import seaborn as sns

from src.plot.utils import create_dataframe_from_wandb_runs


def afr_vs_logpa(df: pd.DataFrame, comparison_metric: str = "AFR"):
    """Create and store plots of Linf/Poison ratio vs comparison_metric/logPA.
    Each plot have Linf/Adversarial Ratio on the x axis and four curves on the y
    axis: comparison_metric for a weak (Standard) and robust model,logPA for a
    weak and robust model.

    df (pandas.DataFrame): the DataFrame generated by create_dataframe
    comparison_metric (str): the metric used for the comparison with logPA
    """
    dirname = osp.join("results", "plots", "adv", "joint")
    os.makedirs(dirname, exist_ok=True)

    x_var = "adversarial_ratio"
    x_label = "Adversarial Ratio"

    fontname = "Times New Roman"
    font_path = fm.findfont(fm.FontProperties(family=fontname))
    # Subset the DataFrame to include only the relevant columns and rows
    level_set = df.loc[
        :,
        [
            "attack_name",
            "model_name",
            "adversarial_ratio",
            "linf",
            "logPA",
            comparison_metric,
        ],
    ]

    dashes_dict = {"Standard": (2, 2), "Engstrom2019Robustness": (2, 2)}
    colors_dict = {
        "Standard": "tab:orange",
        "Engstrom2019Robustness": "tab:blue",
    }
    label_dict = {
        "Standard": "Weak",
        "Engstrom2019Robustness": "Robust",
    }

    # Create a line plot for PGD attack type with Seaborn
    attack_name = "FMN"
    subset = level_set[level_set["attack_name"] == attack_name]
    _, ax1 = plt.subplots(figsize=(2 * 3.861, 2 * 2.7291))
    sns.set(font_scale=1.9)
    plt.rcParams["font.family"] = "serif"
    plt.rcParams["font.serif"] = fontname
    sns.set_style("ticks")

    ax2 = ax1.twinx()

    sns.lineplot(
        data=subset,
        ax=ax1,
        x=x_var,
        y="logPA",
        hue="model_name",
        style="model_name",
        palette=colors_dict,
        dashes=False,
        marker="o",
        # linewidth=2,
    )

    sns.lineplot(
        data=subset,
        ax=ax2,
        x=x_var,
        y="AFR",
        hue="model_name",
        style="model_name",
        palette=colors_dict,
        dashes=dashes_dict,
        marker="X",
        # linewidth=2,
    )
    ax1.minorticks_on()
    ax2.minorticks_on()
    ax1.tick_params(axis="both", which="both", direction="in")
    ax2.tick_params(axis="both", which="both", direction="in")
    xticks_font = fm.FontProperties(family=fontname)
    for tick in ax1.get_xticklabels():
        tick.set_fontproperties(xticks_font)

    for tick in ax2.get_xticklabels():
        tick.set_fontproperties(xticks_font)

    ax1.grid(linestyle="--")
    ax2.grid(False)

    ax1.set_xlabel(x_label, fontname=fontname)
    ax1.set_ylabel("LogPA", fontname=fontname)
    ax2.set_ylabel(comparison_metric, fontname=fontname)

    # Legend
    handles1, labels1 = ax1.get_legend_handles_labels()
    labels1 = [label_dict[label] + " (logPA)" for label in labels1]
    handles2, labels2 = ax2.get_legend_handles_labels()
    labels2 = [label_dict[label] + " (AFR)" for label in labels2]
    labels = labels1 + labels2
    handles = handles1 + handles2

    # sort labels and handles
    ids = sorted(range(len(labels)), key=labels.__getitem__)
    ids[0], ids[1], ids[2], ids[3] = ids[1], ids[0], ids[3], ids[2]
    labels = [labels[i] for i in ids]
    handles = [handles[i] for i in ids]

    ax2.legend(handles, labels)
    # sns.move_legend(ax2, "upper right")
    ax1.legend().remove()

    ax1.set_title(f"{attack_name} attack", fontname=fontname)

    plt.tight_layout()
    fname = osp.join(dirname, f"{attack_name}.pdf")
    plt.savefig(fname)
    plt.clf()
    plt.close()


if __name__ == "__main__":
    attack = "FMN"
    date = "2023-07-31" 
    tags = ["cifar10", attack, "200_steps"]

    df = create_dataframe_from_wandb_runs(
        project="adv_pa_new",
        attack=attack,
        date=date,
        filters={
            "state": "finished",
            "group": "adversarial",
            # "tags": {"$all": ["cifar10", attack]},  # for some reason this does not work
            "$and": [{"tags": tag} for tag in tags],
            "created_at": {"$gte" : date},
        },
        afr="pred",
        cache=True,
    )

    afr_vs_logpa(df, "AFR")
