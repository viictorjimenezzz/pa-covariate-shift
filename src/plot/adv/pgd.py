import os
import os.path as osp
from tqdm import tqdm
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import seaborn as sns

from src.plot.utils import create_dataframe_from_wandb_runs


def afr_vs_logpa(df: pd.DataFrame, comparison_metric: str = "AFR") -> None:
    """Create and store plots of Linf/Poison ratio vs comparison_metric/logPA.
    Each plot have Linf/Adversarial Ratio on the x axis and four curves on the y
    axis: comparison_metric for a weak (Standard) and robust model,logPA for a
    weak and robust model.

    df (pandas.DataFrame): the DataFrame generated by create_dataframe
    comparison_metric (str): the metric used for the comparison with logPA
    """
    dirname = osp.join("results", "plots", "adv", "joint")
    os.makedirs(dirname, exist_ok=True)

    pairs = [("linf", "adversarial_ratio"), ("adversarial_ratio", "linf")]
    for pair in tqdm(pairs, total=len(pairs)):
        level, x_var = pair
        level_name, x_label = (
            ("$\ell_\infty$", "Adversarial Ratio")
            if level == "linf"
            else ("Adversarial Ratio", "$\ell_\infty$")
        )
        pair = df[level].unique()

        fontname = "Times New Roman"
        font_path = fm.findfont(fm.FontProperties(family=fontname))
        for value in tqdm(pair, total=len(pair)):
            # Subset the DataFrame to include only the relevant columns and rows
            level_set = df.loc[
                df[level] == value,
                [
                    "attack_name",
                    "model_name",
                    "adversarial_ratio",
                    "linf",
                    "logPA",
                    comparison_metric,
                ],
            ]

            dashes_dict = {"Standard": (2, 2), "Engstrom2019Robustness": (2, 2)}
            colors_dict = {
                "Standard": "tab:orange",
                "Engstrom2019Robustness": "tab:blue",
            }
            label_dict = {
                "Standard": "Weak",
                "Engstrom2019Robustness": "Robust",
            }

            # Create a line plot for PGD attack type with Seaborn
            attack_name = "PGD"
            subset = level_set[level_set["attack_name"] == attack_name]
            _, ax1 = plt.subplots(
                figsize=(2 * 3.861, 2 * 2.7291),
            )
            sns.set(font_scale=1.9)
            plt.rcParams["font.family"] = "serif"
            plt.rcParams["font.serif"] = fontname
            sns.set_style("ticks")

            ax2 = ax1.twinx()

            sns.lineplot(
                data=subset,
                ax=ax1,
                x=x_var,
                y="logPA",
                hue="model_name",
                style="model_name",
                palette=colors_dict,
                dashes=False,
                marker="o",
                # linewidth=2,
            )

            sns.lineplot(
                data=subset,
                ax=ax2,
                x=x_var,
                y="AFR",
                hue="model_name",
                style="model_name",
                palette=colors_dict,
                dashes=dashes_dict,
                marker="X",
                # linewidth=2,
            )
            ax1.minorticks_on()
            ax2.minorticks_on()
            ax1.tick_params(axis="both", which="both", direction="in")
            ax2.tick_params(axis="both", which="both", direction="in")
            xticks_font = fm.FontProperties(family=fontname)
            for tick in ax1.get_xticklabels():
                tick.set_fontproperties(xticks_font)

            for tick in ax2.get_xticklabels():
                tick.set_fontproperties(xticks_font)

            ax1.grid(linestyle="--")
            ax2.grid(False)

            ax1.set_xlabel(x_label, fontname=fontname)
            ax1.set_ylabel("LogPA", fontname=fontname)
            ax2.set_ylabel(comparison_metric, fontname=fontname)

            # Legend
            handles1, labels1 = ax1.get_legend_handles_labels()
            labels1 = [label_dict[label] + " (logPA)" for label in labels1]
            handles2, labels2 = ax2.get_legend_handles_labels()
            labels2 = [label_dict[label] + " (AFR)" for label in labels2]
            labels = labels1 + labels2
            handles = handles1 + handles2

            # sort labels and handles
            ids = sorted(range(len(labels)), key=labels.__getitem__)
            ids[0], ids[1], ids[2], ids[3] = ids[1], ids[0], ids[3], ids[2]
            labels = [labels[i] for i in ids]
            handles = [handles[i] for i in ids]

            ax2.legend(handles, labels)
            # sns.move_legend(ax2, "upper right")
            ax1.legend().remove()

            ax1.set_title(
                f"{attack_name} attack, {level_name} = {value:.4f}",
                fontname=fontname,
            )

            plt.tight_layout()
            fname = osp.join(dirname, f"{attack_name}_{level}={value:.8f}.pdf")
            plt.savefig(fname)
            plt.clf()
            plt.close()


def afr_vs_logpa_separate(
    df: pd.DataFrame,
    comparison_metric: str = "AFR"
) -> None:
    """Create and store plots of Linf/Poison ratio vs comparison_metric/logPA.
    Each plot have Linf/Adversarial Ratio on the x axis and two curves on the y
    axis: comparison_metric and LogPA for a (weak/robust) model.
    """
    dirname = osp.join("results", "plots", "adv", "separate")
    os.makedirs(dirname, exist_ok=True)

    pairs = [("adversarial_ratio", "linf"), ("linf", "adversarial_ratio")]
    for levels in tqdm(pairs, total=len(pairs)):
        level, x_level = levels
        level_name, x_name = (
            ("$\ell_\infty$", "Adversarial Ratio")
            if level == "linf"
            else ("Adversarial Ratio", "$\ell_\infty$")
        )
        levels = df[level].unique()
        # import ipdb; ipdb.set_trace()
        for value in tqdm(levels, total=len(levels)):
            # Subset the DataFrame to include only the relevant columns and rows
            level_set = df.loc[
                df[level] == value,
                [
                    "name",
                    "attack_name",
                    "model_name",
                    "adversarial_ratio",
                    "linf",
                    "logPA",
                    comparison_metric,
                ],
            ]

            dashes_dict = {"Standard": (2, 2), "Engstrom2019Robustness": (2, 2)}
            colors_dict = {
                "Standard": "tab:orange",
                "Engstrom2019Robustness": "tab:blue",
            }
            label_dict = {
                "Standard": "Weak",
                "Engstrom2019Robustness": "Robust",
            }

            # Create a line plot for PGD attack type with Seaborn
            for attack_name in ("PGD",):
                for model_name in ("Standard", "Engstrom2019Robustness"):
                    # import ipdb; ipdb.set_trace()
                    subset = level_set[
                        (level_set["attack_name"] == attack_name)
                        & (level_set["model_name"] == model_name)
                    ]

                    _, ax1 = plt.subplots()
                    sns.set_style("whitegrid")
                    ax2 = ax1.twinx()
                    sns.set_style("ticks")

                    ids = subset[x_level].sort_values().index
                    # import ipdb; ipdb.set_trace()
                    ax1.plot(
                        subset[x_level].loc[ids],
                        subset["logPA"].loc[ids],
                        c=colors_dict[model_name],
                        dashes=(None, None),
                        label=f"{model_name} (logPA)",
                        marker="o",
                    )
                    ax2.plot(
                        subset[x_level].loc[ids],
                        subset[comparison_metric].loc[ids],
                        c=colors_dict[model_name],
                        dashes=(2, 2),
                        label=f"{model_name} ({comparison_metric})",
                        marker="X",
                    )
                    # ax1.set_ylim([0, 1])
                    # ax2.set_ylim([0, 1])
                    ax1.set_xlabel(x_name)
                    ax1.set_ylabel("LogPA")
                    ax2.set_ylabel(comparison_metric)
                    handles1, labels1 = ax1.get_legend_handles_labels()
                    handles2, labels2 = ax2.get_legend_handles_labels()
                    handles, labels = handles1 + handles2, labels1 + labels2
                    ax2.legend(handles, labels)
                    ax1.legend().remove()

                    plt.title(
                        f"{attack_name} attack, "
                        f"{label_dict[model_name]} model, "
                        f"{level_name} = {value:.4f}"
                    )

                    fname = osp.join(
                        dirname,
                        f"{attack_name}_{label_dict[model_name]}_{level}={value:.8f}.png",
                    )

                    plt.savefig(fname)
                    plt.clf()
                    plt.close()


if __name__ == "__main__":
    df = create_dataframe_from_wandb_runs(
        project="adv_pa_new",
        attack="PGD",
        date="2023-07-26",
        afr="pred",
        cache=True,
    )

    comparison_metric = "AFR"

    afr_vs_logpa(df, comparison_metric)
